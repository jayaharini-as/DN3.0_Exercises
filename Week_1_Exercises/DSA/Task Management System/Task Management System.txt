# Task Management System - Explanation

## 1. Understanding Linked Lists

### Types of Linked Lists

Linked lists are data structures used to store a sequence of elements. They provide dynamic memory allocation and efficient insertion and deletion operations. The main types of linked lists are:

- **Singly Linked List**:
  - **Structure**: A singly linked list consists of nodes where each node has two parts: a data part (which holds the value) and a reference (or link) to the next node in the sequence. The last node in the list points to `null`, indicating the end of the list.
  - **Operations**:
    - **Insertion**: Efficient insertion at the beginning or end of the list, or after a specific node, but requires traversal to insert in the middle.
    - **Deletion**: Efficient deletion if the node to be deleted is known (requires updating the previous node's link).
    - **Traversal**: Linear traversal from the head to the end of the list to access elements.
  - **Advantages**: Simplicity and efficient memory usage for dynamic data.
  - **Disadvantages**: Only forward traversal is possible; searching and accessing specific nodes require linear time.

- **Doubly Linked List**:
  - **Structure**: A doubly linked list consists of nodes where each node has three parts: a data part, a reference to the next node, and a reference to the previous node. This allows traversal in both directions.
  - **Operations**:
    - **Insertion**: More flexible than singly linked lists as nodes can be added or removed from both ends efficiently.
    - **Deletion**: More efficient for deletion operations as nodes have direct access to both their previous and next nodes.
    - **Traversal**: Supports both forward and backward traversal.
  - **Advantages**: Easier and more efficient bi-directional traversal and manipulation.
  - **Disadvantages**: Increased memory usage due to the extra reference in each node.

## 2. Setup

### Creating the `Task` Class

To manage tasks efficiently, the `Task` class is designed with the following attributes:

- **`taskId`**: A unique identifier for each task.
- **`taskName`**: The name or description of the task.
- **`status`**: The current status of the task (e.g., "Pending", "In Progress", "Completed").

The class includes methods to get and set these attributes and a `toString()` method to display task details.

## 3. Implementation

### Implementing a Singly Linked List

In this implementation:

- **Singly Linked List**: A singly linked list is used to manage tasks. Each node in the list contains a `Task` object and a reference to the next node. The list operations include:

  - **Add Task**: Adding a task involves creating a new node and appending it to the end of the list or inserting it at the beginning.
  
  - **Search Task**: Searching for a task requires traversing the list from the head node until the task is found or the end of the list is reached.
  
  - **Traverse Tasks**: Traversing the list involves iterating through each node and accessing the `Task` objects to display or process them.
  
  - **Delete Task**: Deleting a task involves finding the node to be removed and adjusting the references of the neighboring nodes to bypass the removed node.

## 4. Analysis

### Time Complexity of Each Operation

- **Add Task**:
  - **Time Complexity**: \(O(n)\) in the worst case, where `n` is the number of tasks. Adding at the end of the list requires traversal to the last node.
  
- **Search Task**:
  - **Time Complexity**: \(O(n)\), as it involves traversing the list to find the task by its `taskId`.
  
- **Traverse Tasks**:
  - **Time Complexity**: \(O(n)\), since every task in the list needs to be accessed.
  
- **Delete Task**:
  - **Time Complexity**: \(O(n)\) in the worst case, as it may require traversal to find the task and then updating pointers to remove the node.

### Advantages of Linked Lists Over Arrays for Dynamic Data

- **Dynamic Size**: Linked lists can dynamically grow and shrink in size. Unlike arrays, which have a fixed size, linked lists can easily accommodate varying numbers of elements without reallocating memory.
  
- **Efficient Insertions/Deletions**: Inserting or deleting elements in a linked list is more efficient compared to arrays. For arrays, elements need to be shifted to accommodate new elements or fill gaps left by deleted elements. Linked lists do not require such shifting; instead, they simply adjust references.
  
- **No Wasted Space**: Linked lists allocate memory only for the elements that are present, whereas arrays may allocate more memory than needed if the number of elements changes frequently.

- **Memory Utilization**: Linked lists use memory for pointers in addition to the data, which can be a trade-off compared to arrays. However, this is usually outweighed by the benefits of dynamic size and efficient insertions/deletions in many applications.

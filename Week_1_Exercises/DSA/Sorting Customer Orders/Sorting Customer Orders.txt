# E-Commerce Order Sorting: Understanding and Implementation

## 1. Understanding Sorting Algorithms

Sorting algorithms are used to reorder items in a list or array based on a particular criterion, such as total price in this scenario. Below are explanations of the most common sorting algorithms:

### a. Bubble Sort

**Bubble Sort** is a simple comparison-based sorting algorithm. It works as follows:
1. **Compare** adjacent elements in the list.
2. **Swap** them if they are in the wrong order.
3. Repeat the process for each element, reducing the number of comparisons each time since the largest unsorted elements "bubble up" to their correct positions.

**Time Complexity**:
- **Worst-case**: \(O(n^2)\)
- **Best-case**: \(O(n)\) (when the list is already sorted)
- **Average-case**: \(O(n^2)\)

**Characteristics**:
- Simple to implement but inefficient on large lists.
- Stable sort (does not change the relative order of equal elements).

### b. Insertion Sort

**Insertion Sort** builds the final sorted array one item at a time:
1. **Pick** elements from the unsorted portion.
2. **Insert** the picked element into the correct position in the sorted portion.

**Time Complexity**:
- **Worst-case**: \(O(n^2)\)
- **Best-case**: \(O(n)\) (when the list is already sorted)
- **Average-case**: \(O(n^2)\)

**Characteristics**:
- Efficient for small or nearly sorted lists.
- Stable sort.

### c. Quick Sort

**Quick Sort** is a divide-and-conquer algorithm:
1. **Select** a pivot element from the array.
2. **Partition** the array into two sub-arrays: elements less than the pivot and elements greater than the pivot.
3. **Recursively** apply the same process to the sub-arrays.

**Time Complexity**:
- **Worst-case**: \(O(n^2)\) (when the pivot is the smallest or largest element)
- **Best-case**: \(O(n \log n)\)
- **Average-case**: \(O(n \log n)\)

**Characteristics**:
- Efficient for large datasets.
- Not stable by default.

### d. Merge Sort

**Merge Sort** is another divide-and-conquer algorithm:
1. **Divide** the array into two halves.
2. **Recursively** sort each half.
3. **Merge** the sorted halves to produce the final sorted array.

**Time Complexity**:
- **Worst-case**: \(O(n \log n)\)
- **Best-case**: \(O(n \log n)\)
- **Average-case**: \(O(n \log n)\)

**Characteristics**:
- Consistently efficient.
- Stable sort.

## 2. Setup

### Order Class

The `Order` class represents a customer order and contains the following attributes:
- **orderId**: A unique identifier for the order.
- **customerName**: The name of the customer.
- **totalPrice**: The total price of the order.

## 3. Implementation

### a. Bubble Sort

Bubble Sort repeatedly steps through the list, compares adjacent elements, and swaps them if necessary, until the list is sorted. This algorithm is easy to understand and implement but is inefficient for large lists due to its \(O(n^2)\) time complexity.

### b. Quick Sort

Quick Sort is a more advanced algorithm that uses a divide-and-conquer approach. It is generally faster than Bubble Sort for large datasets due to its average-case time complexity of \(O(n \log n)\). The algorithm selects a pivot, partitions the list, and recursively sorts the partitions.

## 4. Analysis

### Performance Comparison

- **Bubble Sort**: Has a time complexity of \(O(n^2)\) in the worst-case and average-case scenarios. It performs poorly with large datasets due to its inefficient comparison and swapping operations.

- **Quick Sort**: Typically has a time complexity of \(O(n \log n)\) in the average-case and best-case scenarios. While it can degrade to \(O(n^2)\) in the worst-case if poor pivot choices are made, this is less common with good pivot selection strategies like choosing the median.

### Why Quick Sort is Generally Preferred

- **Efficiency**: Quick Sort is generally faster than Bubble Sort for large lists due to its \(O(n \log n)\) average-case time complexity.
- **Divide-and-Conquer**: The divide-and-conquer approach used in Quick Sort allows it to handle large datasets more efficiently than the simpler Bubble Sort algorithm.
- **Flexibility**: Quick Sort can be optimized with different pivot selection strategies to mitigate worst-case scenarios, whereas Bubble Sort does not offer much room for optimization.